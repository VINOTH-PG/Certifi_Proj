
004_UART_RX.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000290  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000424  0800042c  0001042c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000424  08000424  0001042c  2**0
                  CONTENTS
  4 .ARM          00000000  08000424  08000424  0001042c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000424  0800042c  0001042c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000424  08000424  00010424  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000428  08000428  00010428  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  0001042c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  20000000  0800042c  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000020  0800042c  00020020  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0001042c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0001045c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000087a  00000000  00000000  0001049f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000254  00000000  00000000  00010d19  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000080  00000000  00000000  00010f70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000058  00000000  00000000  00010ff0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0000db8c  00000000  00000000  00011048  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00000768  00000000  00000000  0001ebd4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0004fbe2  00000000  00000000  0001f33c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00000154  00000000  00000000  0006ef20  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005e  00000000  00000000  0006f074  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000000 	.word	0x20000000
 80001b0:	00000000 	.word	0x00000000
 80001b4:	0800040c 	.word	0x0800040c

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000004 	.word	0x20000004
 80001d0:	0800040c 	.word	0x0800040c

080001d4 <uart_tx_init>:


		}

void uart_tx_init(void)
{
 80001d4:	b580      	push	{r7, lr}
 80001d6:	af00      	add	r7, sp, #0
/*  CONFIGUR THE GPIO MODULE*/

	// ENABLE THE CLOCK ACCESS FOR GPIO

	RCC->AHB1ENR |=(1U<<0);
 80001d8:	4b31      	ldr	r3, [pc, #196]	; (80002a0 <uart_tx_init+0xcc>)
 80001da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80001dc:	4a30      	ldr	r2, [pc, #192]	; (80002a0 <uart_tx_init+0xcc>)
 80001de:	f043 0301 	orr.w	r3, r3, #1
 80001e2:	6313      	str	r3, [r2, #48]	; 0x30


	//SET THE MODE AS ALTERNATE FUNCTION MODE

	GPIOA->MODER &=~(1U<<4);
 80001e4:	4b2f      	ldr	r3, [pc, #188]	; (80002a4 <uart_tx_init+0xd0>)
 80001e6:	681b      	ldr	r3, [r3, #0]
 80001e8:	4a2e      	ldr	r2, [pc, #184]	; (80002a4 <uart_tx_init+0xd0>)
 80001ea:	f023 0310 	bic.w	r3, r3, #16
 80001ee:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |=(1U<<5);
 80001f0:	4b2c      	ldr	r3, [pc, #176]	; (80002a4 <uart_tx_init+0xd0>)
 80001f2:	681b      	ldr	r3, [r3, #0]
 80001f4:	4a2b      	ldr	r2, [pc, #172]	; (80002a4 <uart_tx_init+0xd0>)
 80001f6:	f043 0320 	orr.w	r3, r3, #32
 80001fa:	6013      	str	r3, [r2, #0]



	//SET THE ALTERNATE FUNCTION MODE AS THE 'UART TX - AF07' 0111

	GPIOA->AFR[0] |=(1U<<8);
 80001fc:	4b29      	ldr	r3, [pc, #164]	; (80002a4 <uart_tx_init+0xd0>)
 80001fe:	6a1b      	ldr	r3, [r3, #32]
 8000200:	4a28      	ldr	r2, [pc, #160]	; (80002a4 <uart_tx_init+0xd0>)
 8000202:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000206:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |=(1U<<9);
 8000208:	4b26      	ldr	r3, [pc, #152]	; (80002a4 <uart_tx_init+0xd0>)
 800020a:	6a1b      	ldr	r3, [r3, #32]
 800020c:	4a25      	ldr	r2, [pc, #148]	; (80002a4 <uart_tx_init+0xd0>)
 800020e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000212:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |=(1U<<10);
 8000214:	4b23      	ldr	r3, [pc, #140]	; (80002a4 <uart_tx_init+0xd0>)
 8000216:	6a1b      	ldr	r3, [r3, #32]
 8000218:	4a22      	ldr	r2, [pc, #136]	; (80002a4 <uart_tx_init+0xd0>)
 800021a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800021e:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] &=~(1U<<11);
 8000220:	4b20      	ldr	r3, [pc, #128]	; (80002a4 <uart_tx_init+0xd0>)
 8000222:	6a1b      	ldr	r3, [r3, #32]
 8000224:	4a1f      	ldr	r2, [pc, #124]	; (80002a4 <uart_tx_init+0xd0>)
 8000226:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800022a:	6213      	str	r3, [r2, #32]

	//SET THE MODE AS ALTERNATE FUNCTION MODE

	GPIOA->MODER &=~(1U<<6);
 800022c:	4b1d      	ldr	r3, [pc, #116]	; (80002a4 <uart_tx_init+0xd0>)
 800022e:	681b      	ldr	r3, [r3, #0]
 8000230:	4a1c      	ldr	r2, [pc, #112]	; (80002a4 <uart_tx_init+0xd0>)
 8000232:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000236:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |=(1U<<7);
 8000238:	4b1a      	ldr	r3, [pc, #104]	; (80002a4 <uart_tx_init+0xd0>)
 800023a:	681b      	ldr	r3, [r3, #0]
 800023c:	4a19      	ldr	r2, [pc, #100]	; (80002a4 <uart_tx_init+0xd0>)
 800023e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000242:	6013      	str	r3, [r2, #0]

	//SET THE ALTERNATE FUNCTION MODE AS THE 'UART TX - AF07' 0111

	GPIOA->AFR[0] |=(1U<<12);
 8000244:	4b17      	ldr	r3, [pc, #92]	; (80002a4 <uart_tx_init+0xd0>)
 8000246:	6a1b      	ldr	r3, [r3, #32]
 8000248:	4a16      	ldr	r2, [pc, #88]	; (80002a4 <uart_tx_init+0xd0>)
 800024a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800024e:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |=(1U<<13);
 8000250:	4b14      	ldr	r3, [pc, #80]	; (80002a4 <uart_tx_init+0xd0>)
 8000252:	6a1b      	ldr	r3, [r3, #32]
 8000254:	4a13      	ldr	r2, [pc, #76]	; (80002a4 <uart_tx_init+0xd0>)
 8000256:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800025a:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |=(1U<<14);
 800025c:	4b11      	ldr	r3, [pc, #68]	; (80002a4 <uart_tx_init+0xd0>)
 800025e:	6a1b      	ldr	r3, [r3, #32]
 8000260:	4a10      	ldr	r2, [pc, #64]	; (80002a4 <uart_tx_init+0xd0>)
 8000262:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000266:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] &=~(1U<<15);
 8000268:	4b0e      	ldr	r3, [pc, #56]	; (80002a4 <uart_tx_init+0xd0>)
 800026a:	6a1b      	ldr	r3, [r3, #32]
 800026c:	4a0d      	ldr	r2, [pc, #52]	; (80002a4 <uart_tx_init+0xd0>)
 800026e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8000272:	6213      	str	r3, [r2, #32]
	/*   CONFIGURE THE UART MODULE*/


	// ENABLE THE CLOCK ACCESS TO UART MODULE

	RCC->APB1ENR |=(1U<<17);
 8000274:	4b0a      	ldr	r3, [pc, #40]	; (80002a0 <uart_tx_init+0xcc>)
 8000276:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000278:	4a09      	ldr	r2, [pc, #36]	; (80002a0 <uart_tx_init+0xcc>)
 800027a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800027e:	6413      	str	r3, [r2, #64]	; 0x40


	// SET THE BAUDRATE TO THE  UART

	computate_baudrate_bd(APB1_CLK,SYS_BAUDRATE);
 8000280:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
 8000284:	4808      	ldr	r0, [pc, #32]	; (80002a8 <uart_tx_init+0xd4>)
 8000286:	f000 f827 	bl	80002d8 <computate_baudrate_bd>

	// SET THE DIRECTION OF THE UART

	USART2->CR1 =(1U<<3)|(1U<<2);
 800028a:	4b08      	ldr	r3, [pc, #32]	; (80002ac <uart_tx_init+0xd8>)
 800028c:	220c      	movs	r2, #12
 800028e:	60da      	str	r2, [r3, #12]


	// ENABLE THE UART MODULE

	USART2->CR1 |=(1U<<13);
 8000290:	4b06      	ldr	r3, [pc, #24]	; (80002ac <uart_tx_init+0xd8>)
 8000292:	68db      	ldr	r3, [r3, #12]
 8000294:	4a05      	ldr	r2, [pc, #20]	; (80002ac <uart_tx_init+0xd8>)
 8000296:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800029a:	60d3      	str	r3, [r2, #12]

}
 800029c:	bf00      	nop
 800029e:	bd80      	pop	{r7, pc}
 80002a0:	40023800 	.word	0x40023800
 80002a4:	40020000 	.word	0x40020000
 80002a8:	00f42400 	.word	0x00f42400
 80002ac:	40004400 	.word	0x40004400

080002b0 <uart2_re>:
	uart2_wr(ch);
	return (ch);
}
char uart2_re (void)

{
 80002b0:	b480      	push	{r7}
 80002b2:	af00      	add	r7, sp, #0
	// MAKE SURE THE RX DATA REGISTER NOT IS EMPTY
		while(!(USART2->SR & (1U<<5) ))
 80002b4:	bf00      	nop
 80002b6:	4b07      	ldr	r3, [pc, #28]	; (80002d4 <uart2_re+0x24>)
 80002b8:	681b      	ldr	r3, [r3, #0]
 80002ba:	f003 0320 	and.w	r3, r3, #32
 80002be:	2b00      	cmp	r3, #0
 80002c0:	d0f9      	beq.n	80002b6 <uart2_re+0x6>
		{}

	return USART2->DR;
 80002c2:	4b04      	ldr	r3, [pc, #16]	; (80002d4 <uart2_re+0x24>)
 80002c4:	685b      	ldr	r3, [r3, #4]
 80002c6:	b2db      	uxtb	r3, r3
}
 80002c8:	4618      	mov	r0, r3
 80002ca:	46bd      	mov	sp, r7
 80002cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002d0:	4770      	bx	lr
 80002d2:	bf00      	nop
 80002d4:	40004400 	.word	0x40004400

080002d8 <computate_baudrate_bd>:
//{
//USART2->BRR = computate_baudrate_bd(periclk,baudrate);
//
//}
void computate_baudrate_bd (uint32_t periclk , uint32_t baudrate)
{
 80002d8:	b480      	push	{r7}
 80002da:	b085      	sub	sp, #20
 80002dc:	af00      	add	r7, sp, #0
 80002de:	6078      	str	r0, [r7, #4]
 80002e0:	6039      	str	r1, [r7, #0]

uint32_t UART2 = ((periclk+(baudrate/2U))/baudrate);
 80002e2:	683b      	ldr	r3, [r7, #0]
 80002e4:	085a      	lsrs	r2, r3, #1
 80002e6:	687b      	ldr	r3, [r7, #4]
 80002e8:	441a      	add	r2, r3
 80002ea:	683b      	ldr	r3, [r7, #0]
 80002ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80002f0:	60fb      	str	r3, [r7, #12]
USART2->BRR = UART2;
 80002f2:	4a04      	ldr	r2, [pc, #16]	; (8000304 <computate_baudrate_bd+0x2c>)
 80002f4:	68fb      	ldr	r3, [r7, #12]
 80002f6:	6093      	str	r3, [r2, #8]
}
 80002f8:	bf00      	nop
 80002fa:	3714      	adds	r7, #20
 80002fc:	46bd      	mov	sp, r7
 80002fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000302:	4770      	bx	lr
 8000304:	40004400 	.word	0x40004400

08000308 <main>:
#include "uart_tx_rx.h"
char key;
int main()
{
 8000308:	b580      	push	{r7, lr}
 800030a:	af00      	add	r7, sp, #0
	RCC->AHB1ENR |=(1U<<0);
 800030c:	4b15      	ldr	r3, [pc, #84]	; (8000364 <main+0x5c>)
 800030e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000310:	4a14      	ldr	r2, [pc, #80]	; (8000364 <main+0x5c>)
 8000312:	f043 0301 	orr.w	r3, r3, #1
 8000316:	6313      	str	r3, [r2, #48]	; 0x30


	GPIOA->MODER |=(1U<<10);
 8000318:	4b13      	ldr	r3, [pc, #76]	; (8000368 <main+0x60>)
 800031a:	681b      	ldr	r3, [r3, #0]
 800031c:	4a12      	ldr	r2, [pc, #72]	; (8000368 <main+0x60>)
 800031e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000322:	6013      	str	r3, [r2, #0]
	GPIOA->MODER &=~(1U<<11);
 8000324:	4b10      	ldr	r3, [pc, #64]	; (8000368 <main+0x60>)
 8000326:	681b      	ldr	r3, [r3, #0]
 8000328:	4a0f      	ldr	r2, [pc, #60]	; (8000368 <main+0x60>)
 800032a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800032e:	6013      	str	r3, [r2, #0]

	uart_tx_init();
 8000330:	f7ff ff50 	bl	80001d4 <uart_tx_init>


while (1)
{
	key = uart2_re();
 8000334:	f7ff ffbc 	bl	80002b0 <uart2_re>
 8000338:	4603      	mov	r3, r0
 800033a:	461a      	mov	r2, r3
 800033c:	4b0b      	ldr	r3, [pc, #44]	; (800036c <main+0x64>)
 800033e:	701a      	strb	r2, [r3, #0]
if (key == '1')
 8000340:	4b0a      	ldr	r3, [pc, #40]	; (800036c <main+0x64>)
 8000342:	781b      	ldrb	r3, [r3, #0]
 8000344:	2b31      	cmp	r3, #49	; 0x31
 8000346:	d106      	bne.n	8000356 <main+0x4e>
{
	GPIOA->ODR |=(1U<<5);
 8000348:	4b07      	ldr	r3, [pc, #28]	; (8000368 <main+0x60>)
 800034a:	695b      	ldr	r3, [r3, #20]
 800034c:	4a06      	ldr	r2, [pc, #24]	; (8000368 <main+0x60>)
 800034e:	f043 0320 	orr.w	r3, r3, #32
 8000352:	6153      	str	r3, [r2, #20]
 8000354:	e7ee      	b.n	8000334 <main+0x2c>
}

else
{
	GPIOA->ODR &=~(1U<<5);
 8000356:	4b04      	ldr	r3, [pc, #16]	; (8000368 <main+0x60>)
 8000358:	695b      	ldr	r3, [r3, #20]
 800035a:	4a03      	ldr	r2, [pc, #12]	; (8000368 <main+0x60>)
 800035c:	f023 0320 	bic.w	r3, r3, #32
 8000360:	6153      	str	r3, [r2, #20]
	key = uart2_re();
 8000362:	e7e7      	b.n	8000334 <main+0x2c>
 8000364:	40023800 	.word	0x40023800
 8000368:	40020000 	.word	0x40020000
 800036c:	2000001c 	.word	0x2000001c

08000370 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000370:	480d      	ldr	r0, [pc, #52]	; (80003a8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000372:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000374:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000378:	480c      	ldr	r0, [pc, #48]	; (80003ac <LoopForever+0x6>)
  ldr r1, =_edata
 800037a:	490d      	ldr	r1, [pc, #52]	; (80003b0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800037c:	4a0d      	ldr	r2, [pc, #52]	; (80003b4 <LoopForever+0xe>)
  movs r3, #0
 800037e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000380:	e002      	b.n	8000388 <LoopCopyDataInit>

08000382 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000382:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000384:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000386:	3304      	adds	r3, #4

08000388 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000388:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800038a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800038c:	d3f9      	bcc.n	8000382 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800038e:	4a0a      	ldr	r2, [pc, #40]	; (80003b8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000390:	4c0a      	ldr	r4, [pc, #40]	; (80003bc <LoopForever+0x16>)
  movs r3, #0
 8000392:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000394:	e001      	b.n	800039a <LoopFillZerobss>

08000396 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000396:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000398:	3204      	adds	r2, #4

0800039a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800039a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800039c:	d3fb      	bcc.n	8000396 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800039e:	f000 f811 	bl	80003c4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80003a2:	f7ff ffb1 	bl	8000308 <main>

080003a6 <LoopForever>:

LoopForever:
  b LoopForever
 80003a6:	e7fe      	b.n	80003a6 <LoopForever>
  ldr   r0, =_estack
 80003a8:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80003ac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80003b0:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80003b4:	0800042c 	.word	0x0800042c
  ldr r2, =_sbss
 80003b8:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80003bc:	20000020 	.word	0x20000020

080003c0 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80003c0:	e7fe      	b.n	80003c0 <ADC_IRQHandler>
	...

080003c4 <__libc_init_array>:
 80003c4:	b570      	push	{r4, r5, r6, lr}
 80003c6:	4d0d      	ldr	r5, [pc, #52]	; (80003fc <__libc_init_array+0x38>)
 80003c8:	4c0d      	ldr	r4, [pc, #52]	; (8000400 <__libc_init_array+0x3c>)
 80003ca:	1b64      	subs	r4, r4, r5
 80003cc:	10a4      	asrs	r4, r4, #2
 80003ce:	2600      	movs	r6, #0
 80003d0:	42a6      	cmp	r6, r4
 80003d2:	d109      	bne.n	80003e8 <__libc_init_array+0x24>
 80003d4:	4d0b      	ldr	r5, [pc, #44]	; (8000404 <__libc_init_array+0x40>)
 80003d6:	4c0c      	ldr	r4, [pc, #48]	; (8000408 <__libc_init_array+0x44>)
 80003d8:	f000 f818 	bl	800040c <_init>
 80003dc:	1b64      	subs	r4, r4, r5
 80003de:	10a4      	asrs	r4, r4, #2
 80003e0:	2600      	movs	r6, #0
 80003e2:	42a6      	cmp	r6, r4
 80003e4:	d105      	bne.n	80003f2 <__libc_init_array+0x2e>
 80003e6:	bd70      	pop	{r4, r5, r6, pc}
 80003e8:	f855 3b04 	ldr.w	r3, [r5], #4
 80003ec:	4798      	blx	r3
 80003ee:	3601      	adds	r6, #1
 80003f0:	e7ee      	b.n	80003d0 <__libc_init_array+0xc>
 80003f2:	f855 3b04 	ldr.w	r3, [r5], #4
 80003f6:	4798      	blx	r3
 80003f8:	3601      	adds	r6, #1
 80003fa:	e7f2      	b.n	80003e2 <__libc_init_array+0x1e>
 80003fc:	08000424 	.word	0x08000424
 8000400:	08000424 	.word	0x08000424
 8000404:	08000424 	.word	0x08000424
 8000408:	08000428 	.word	0x08000428

0800040c <_init>:
 800040c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800040e:	bf00      	nop
 8000410:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000412:	bc08      	pop	{r3}
 8000414:	469e      	mov	lr, r3
 8000416:	4770      	bx	lr

08000418 <_fini>:
 8000418:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800041a:	bf00      	nop
 800041c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800041e:	bc08      	pop	{r3}
 8000420:	469e      	mov	lr, r3
 8000422:	4770      	bx	lr
