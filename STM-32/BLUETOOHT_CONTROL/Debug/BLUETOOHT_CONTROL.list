
BLUETOOHT_CONTROL.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000002d0  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000464  0800046c  0001046c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000464  08000464  0001046c  2**0
                  CONTENTS
  4 .ARM          00000000  08000464  08000464  0001046c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000464  0800046c  0001046c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000464  08000464  00010464  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000468  08000468  00010468  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  0001046c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  0800046c  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  0800046c  0002001c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0001046c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0001049c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00000724  00000000  00000000  000104df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000237  00000000  00000000  00010c03  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000080  00000000  00000000  00010e40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000052  00000000  00000000  00010ec0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0000dc55  00000000  00000000  00010f12  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00000c0d  00000000  00000000  0001eb67  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0004f797  00000000  00000000  0001f774  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000000f8  00000000  00000000  0006ef0c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000064  00000000  00000000  0006f004  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000000 	.word	0x20000000
 80001b0:	00000000 	.word	0x00000000
 80001b4:	0800044c 	.word	0x0800044c

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000004 	.word	0x20000004
 80001d0:	0800044c 	.word	0x0800044c

080001d4 <uart_init>:




void uart_init(void)
{
 80001d4:	b580      	push	{r7, lr}
 80001d6:	af00      	add	r7, sp, #0
			/* INITILIZE THE THE GPIO MODULE */


	// ENABLE THE CLK ACCES TO THE GPIOC

	RCC->AHB1ENR |= (1U<<2); // USART6 CONNECTED TO GPIOC
 80001d8:	4b33      	ldr	r3, [pc, #204]	; (80002a8 <uart_init+0xd4>)
 80001da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80001dc:	4a32      	ldr	r2, [pc, #200]	; (80002a8 <uart_init+0xd4>)
 80001de:	f043 0304 	orr.w	r3, r3, #4
 80001e2:	6313      	str	r3, [r2, #48]	; 0x30

	// SET THE GPIOC  MODE (ALTRENATE FUNCTIONMODE)

	GPIOC->MODER &=~(1U<<12);
 80001e4:	4b31      	ldr	r3, [pc, #196]	; (80002ac <uart_init+0xd8>)
 80001e6:	681b      	ldr	r3, [r3, #0]
 80001e8:	4a30      	ldr	r2, [pc, #192]	; (80002ac <uart_init+0xd8>)
 80001ea:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80001ee:	6013      	str	r3, [r2, #0]
	GPIOC->MODER |=(1U<<13);  // FOR PORTC 6 UART TX
 80001f0:	4b2e      	ldr	r3, [pc, #184]	; (80002ac <uart_init+0xd8>)
 80001f2:	681b      	ldr	r3, [r3, #0]
 80001f4:	4a2d      	ldr	r2, [pc, #180]	; (80002ac <uart_init+0xd8>)
 80001f6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80001fa:	6013      	str	r3, [r2, #0]

	GPIOC->MODER &=~(1U<<14);
 80001fc:	4b2b      	ldr	r3, [pc, #172]	; (80002ac <uart_init+0xd8>)
 80001fe:	681b      	ldr	r3, [r3, #0]
 8000200:	4a2a      	ldr	r2, [pc, #168]	; (80002ac <uart_init+0xd8>)
 8000202:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000206:	6013      	str	r3, [r2, #0]
	GPIOC->MODER |=(1U<<15);  	// FOR PORTC 7 UART RX
 8000208:	4b28      	ldr	r3, [pc, #160]	; (80002ac <uart_init+0xd8>)
 800020a:	681b      	ldr	r3, [r3, #0]
 800020c:	4a27      	ldr	r2, [pc, #156]	; (80002ac <uart_init+0xd8>)
 800020e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000212:	6013      	str	r3, [r2, #0]

	// SET THE MODE TO ALTRENATE FUNCTION MODE (AF08) FOR UART6 MODULE


	GPIOC->AFR [0] &= ~(1U<<24);   // FOR USART TX AF08
 8000214:	4b25      	ldr	r3, [pc, #148]	; (80002ac <uart_init+0xd8>)
 8000216:	6a1b      	ldr	r3, [r3, #32]
 8000218:	4a24      	ldr	r2, [pc, #144]	; (80002ac <uart_init+0xd8>)
 800021a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800021e:	6213      	str	r3, [r2, #32]
	GPIOC->AFR [0] &= ~(1U<<25);
 8000220:	4b22      	ldr	r3, [pc, #136]	; (80002ac <uart_init+0xd8>)
 8000222:	6a1b      	ldr	r3, [r3, #32]
 8000224:	4a21      	ldr	r2, [pc, #132]	; (80002ac <uart_init+0xd8>)
 8000226:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 800022a:	6213      	str	r3, [r2, #32]
	GPIOC->AFR [0] &= ~(1U<<26);
 800022c:	4b1f      	ldr	r3, [pc, #124]	; (80002ac <uart_init+0xd8>)
 800022e:	6a1b      	ldr	r3, [r3, #32]
 8000230:	4a1e      	ldr	r2, [pc, #120]	; (80002ac <uart_init+0xd8>)
 8000232:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8000236:	6213      	str	r3, [r2, #32]
	GPIOC->AFR [0] |=  (1U<<27);
 8000238:	4b1c      	ldr	r3, [pc, #112]	; (80002ac <uart_init+0xd8>)
 800023a:	6a1b      	ldr	r3, [r3, #32]
 800023c:	4a1b      	ldr	r2, [pc, #108]	; (80002ac <uart_init+0xd8>)
 800023e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8000242:	6213      	str	r3, [r2, #32]

	GPIOC->AFR [0] &= ~(1U<<28);    //FOR USART RX AF08
 8000244:	4b19      	ldr	r3, [pc, #100]	; (80002ac <uart_init+0xd8>)
 8000246:	6a1b      	ldr	r3, [r3, #32]
 8000248:	4a18      	ldr	r2, [pc, #96]	; (80002ac <uart_init+0xd8>)
 800024a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800024e:	6213      	str	r3, [r2, #32]
	GPIOC->AFR [0] &= ~(1U<<29);
 8000250:	4b16      	ldr	r3, [pc, #88]	; (80002ac <uart_init+0xd8>)
 8000252:	6a1b      	ldr	r3, [r3, #32]
 8000254:	4a15      	ldr	r2, [pc, #84]	; (80002ac <uart_init+0xd8>)
 8000256:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800025a:	6213      	str	r3, [r2, #32]
	GPIOC->AFR [0] &= ~(1U<<30);
 800025c:	4b13      	ldr	r3, [pc, #76]	; (80002ac <uart_init+0xd8>)
 800025e:	6a1b      	ldr	r3, [r3, #32]
 8000260:	4a12      	ldr	r2, [pc, #72]	; (80002ac <uart_init+0xd8>)
 8000262:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8000266:	6213      	str	r3, [r2, #32]
	GPIOC->AFR [0] |=  (1U<<31);
 8000268:	4b10      	ldr	r3, [pc, #64]	; (80002ac <uart_init+0xd8>)
 800026a:	6a1b      	ldr	r3, [r3, #32]
 800026c:	4a0f      	ldr	r2, [pc, #60]	; (80002ac <uart_init+0xd8>)
 800026e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000272:	6213      	str	r3, [r2, #32]
			/* INITILIZE THE UART MODULE  */


	// ENABLE THE CLOCK ACCESS TO THE UART MODULE

		RCC->APB2ENR |=(1U<<5);
 8000274:	4b0c      	ldr	r3, [pc, #48]	; (80002a8 <uart_init+0xd4>)
 8000276:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000278:	4a0b      	ldr	r2, [pc, #44]	; (80002a8 <uart_init+0xd4>)
 800027a:	f043 0320 	orr.w	r3, r3, #32
 800027e:	6453      	str	r3, [r2, #68]	; 0x44

	// SET THE  BADURATE TO THE UART MODULE

		set_uart_baudrate(PERICLK,BAUDRATE);
 8000280:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 8000284:	480a      	ldr	r0, [pc, #40]	; (80002b0 <uart_init+0xdc>)
 8000286:	f000 f817 	bl	80002b8 <set_uart_baudrate>

	// SET THE DIRECTION OF THE UART

		USART6->CR1 |=(1U<<2) | (1U<<3);
 800028a:	4b0a      	ldr	r3, [pc, #40]	; (80002b4 <uart_init+0xe0>)
 800028c:	68db      	ldr	r3, [r3, #12]
 800028e:	4a09      	ldr	r2, [pc, #36]	; (80002b4 <uart_init+0xe0>)
 8000290:	f043 030c 	orr.w	r3, r3, #12
 8000294:	60d3      	str	r3, [r2, #12]

	// ENABLE THE UART MODULE

		USART6->CR1 |=(1U<<13);
 8000296:	4b07      	ldr	r3, [pc, #28]	; (80002b4 <uart_init+0xe0>)
 8000298:	68db      	ldr	r3, [r3, #12]
 800029a:	4a06      	ldr	r2, [pc, #24]	; (80002b4 <uart_init+0xe0>)
 800029c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80002a0:	60d3      	str	r3, [r2, #12]



}
 80002a2:	bf00      	nop
 80002a4:	bd80      	pop	{r7, pc}
 80002a6:	bf00      	nop
 80002a8:	40023800 	.word	0x40023800
 80002ac:	40020800 	.word	0x40020800
 80002b0:	00f42400 	.word	0x00f42400
 80002b4:	40011400 	.word	0x40011400

080002b8 <set_uart_baudrate>:

void set_uart_baudrate(uint32_t CLOCK , uint32_t BAUD)
{
 80002b8:	b480      	push	{r7}
 80002ba:	b085      	sub	sp, #20
 80002bc:	af00      	add	r7, sp, #0
 80002be:	6078      	str	r0, [r7, #4]
 80002c0:	6039      	str	r1, [r7, #0]

	// SET THE UART BADURATE(BAUDRATE,PERICLK)

	uint32_t UART6 =  ((CLOCK + (BAUD/2U)) / BAUD) ;
 80002c2:	683b      	ldr	r3, [r7, #0]
 80002c4:	085a      	lsrs	r2, r3, #1
 80002c6:	687b      	ldr	r3, [r7, #4]
 80002c8:	441a      	add	r2, r3
 80002ca:	683b      	ldr	r3, [r7, #0]
 80002cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80002d0:	60fb      	str	r3, [r7, #12]

	// STORE THE BAUDRATE TO THE BAUDRATE REGISTER

	USART6->BRR = UART6;
 80002d2:	4a04      	ldr	r2, [pc, #16]	; (80002e4 <set_uart_baudrate+0x2c>)
 80002d4:	68fb      	ldr	r3, [r7, #12]
 80002d6:	6093      	str	r3, [r2, #8]

}
 80002d8:	bf00      	nop
 80002da:	3714      	adds	r7, #20
 80002dc:	46bd      	mov	sp, r7
 80002de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002e2:	4770      	bx	lr
 80002e4:	40011400 	.word	0x40011400

080002e8 <uart_tx>:


void uart_tx(char temp)
{
 80002e8:	b480      	push	{r7}
 80002ea:	b083      	sub	sp, #12
 80002ec:	af00      	add	r7, sp, #0
 80002ee:	4603      	mov	r3, r0
 80002f0:	71fb      	strb	r3, [r7, #7]
	// WAIT UNTIL THE TX DATA REG IS SET

	while (!(USART6->SR & (1U<<7)))
 80002f2:	bf00      	nop
 80002f4:	4b07      	ldr	r3, [pc, #28]	; (8000314 <uart_tx+0x2c>)
 80002f6:	681b      	ldr	r3, [r3, #0]
 80002f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80002fc:	2b00      	cmp	r3, #0
 80002fe:	d0f9      	beq.n	80002f4 <uart_tx+0xc>

	}

	// WRITE THE DATA TO DATA REG

	USART6->DR = (temp & 0xFF);
 8000300:	4a04      	ldr	r2, [pc, #16]	; (8000314 <uart_tx+0x2c>)
 8000302:	79fb      	ldrb	r3, [r7, #7]
 8000304:	6053      	str	r3, [r2, #4]
}
 8000306:	bf00      	nop
 8000308:	370c      	adds	r7, #12
 800030a:	46bd      	mov	sp, r7
 800030c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000310:	4770      	bx	lr
 8000312:	bf00      	nop
 8000314:	40011400 	.word	0x40011400

08000318 <uart_rx>:

char uart_rx(void)
{
 8000318:	b480      	push	{r7}
 800031a:	af00      	add	r7, sp, #0
	// WAIT UNTIL THE RX DATA REG IS SET

	while (!(USART6->SR & (1U<<5)))
 800031c:	bf00      	nop
 800031e:	4b07      	ldr	r3, [pc, #28]	; (800033c <uart_rx+0x24>)
 8000320:	681b      	ldr	r3, [r3, #0]
 8000322:	f003 0320 	and.w	r3, r3, #32
 8000326:	2b00      	cmp	r3, #0
 8000328:	d0f9      	beq.n	800031e <uart_rx+0x6>
	{}

	// READ THE DATA FROM DR REG

	    return USART6->DR;
 800032a:	4b04      	ldr	r3, [pc, #16]	; (800033c <uart_rx+0x24>)
 800032c:	685b      	ldr	r3, [r3, #4]
 800032e:	b2db      	uxtb	r3, r3


}
 8000330:	4618      	mov	r0, r3
 8000332:	46bd      	mov	sp, r7
 8000334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000338:	4770      	bx	lr
 800033a:	bf00      	nop
 800033c:	40011400 	.word	0x40011400

08000340 <main>:

#include "bt.h"


int main(void)
{
 8000340:	b580      	push	{r7, lr}
 8000342:	b082      	sub	sp, #8
 8000344:	af00      	add	r7, sp, #0

		RCC->AHB1ENR |=(1U<<0);
 8000346:	4b18      	ldr	r3, [pc, #96]	; (80003a8 <main+0x68>)
 8000348:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800034a:	4a17      	ldr	r2, [pc, #92]	; (80003a8 <main+0x68>)
 800034c:	f043 0301 	orr.w	r3, r3, #1
 8000350:	6313      	str	r3, [r2, #48]	; 0x30

		GPIOA->MODER |= (1U<<10);
 8000352:	4b16      	ldr	r3, [pc, #88]	; (80003ac <main+0x6c>)
 8000354:	681b      	ldr	r3, [r3, #0]
 8000356:	4a15      	ldr	r2, [pc, #84]	; (80003ac <main+0x6c>)
 8000358:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800035c:	6013      	str	r3, [r2, #0]
		GPIOA->MODER &= ~(1U<<11);
 800035e:	4b13      	ldr	r3, [pc, #76]	; (80003ac <main+0x6c>)
 8000360:	681b      	ldr	r3, [r3, #0]
 8000362:	4a12      	ldr	r2, [pc, #72]	; (80003ac <main+0x6c>)
 8000364:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8000368:	6013      	str	r3, [r2, #0]

	uart_init();
 800036a:	f7ff ff33 	bl	80001d4 <uart_init>


	while (1)
	{
		uint32_t temp =  uart_rx();
 800036e:	f7ff ffd3 	bl	8000318 <uart_rx>
 8000372:	4603      	mov	r3, r0
 8000374:	607b      	str	r3, [r7, #4]
		uart_tx(temp);
 8000376:	687b      	ldr	r3, [r7, #4]
 8000378:	b2db      	uxtb	r3, r3
 800037a:	4618      	mov	r0, r3
 800037c:	f7ff ffb4 	bl	80002e8 <uart_tx>

		if (temp == '1')
 8000380:	687b      	ldr	r3, [r7, #4]
 8000382:	2b31      	cmp	r3, #49	; 0x31
 8000384:	d106      	bne.n	8000394 <main+0x54>

		{

			GPIOA->ODR |=(1U<<5);
 8000386:	4b09      	ldr	r3, [pc, #36]	; (80003ac <main+0x6c>)
 8000388:	695b      	ldr	r3, [r3, #20]
 800038a:	4a08      	ldr	r2, [pc, #32]	; (80003ac <main+0x6c>)
 800038c:	f043 0320 	orr.w	r3, r3, #32
 8000390:	6153      	str	r3, [r2, #20]
 8000392:	e7ec      	b.n	800036e <main+0x2e>


		}


		else if(temp == '0')
 8000394:	687b      	ldr	r3, [r7, #4]
 8000396:	2b30      	cmp	r3, #48	; 0x30
 8000398:	d1e9      	bne.n	800036e <main+0x2e>

	     {

				GPIOA->ODR &= ~(1U<<5);
 800039a:	4b04      	ldr	r3, [pc, #16]	; (80003ac <main+0x6c>)
 800039c:	695b      	ldr	r3, [r3, #20]
 800039e:	4a03      	ldr	r2, [pc, #12]	; (80003ac <main+0x6c>)
 80003a0:	f023 0320 	bic.w	r3, r3, #32
 80003a4:	6153      	str	r3, [r2, #20]
	{
 80003a6:	e7e2      	b.n	800036e <main+0x2e>
 80003a8:	40023800 	.word	0x40023800
 80003ac:	40020000 	.word	0x40020000

080003b0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80003b0:	480d      	ldr	r0, [pc, #52]	; (80003e8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80003b2:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80003b4:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80003b8:	480c      	ldr	r0, [pc, #48]	; (80003ec <LoopForever+0x6>)
  ldr r1, =_edata
 80003ba:	490d      	ldr	r1, [pc, #52]	; (80003f0 <LoopForever+0xa>)
  ldr r2, =_sidata
 80003bc:	4a0d      	ldr	r2, [pc, #52]	; (80003f4 <LoopForever+0xe>)
  movs r3, #0
 80003be:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80003c0:	e002      	b.n	80003c8 <LoopCopyDataInit>

080003c2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80003c2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80003c4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80003c6:	3304      	adds	r3, #4

080003c8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80003c8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80003ca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80003cc:	d3f9      	bcc.n	80003c2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80003ce:	4a0a      	ldr	r2, [pc, #40]	; (80003f8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80003d0:	4c0a      	ldr	r4, [pc, #40]	; (80003fc <LoopForever+0x16>)
  movs r3, #0
 80003d2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80003d4:	e001      	b.n	80003da <LoopFillZerobss>

080003d6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80003d6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80003d8:	3204      	adds	r2, #4

080003da <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80003da:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80003dc:	d3fb      	bcc.n	80003d6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80003de:	f000 f811 	bl	8000404 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80003e2:	f7ff ffad 	bl	8000340 <main>

080003e6 <LoopForever>:

LoopForever:
  b LoopForever
 80003e6:	e7fe      	b.n	80003e6 <LoopForever>
  ldr   r0, =_estack
 80003e8:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80003ec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80003f0:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80003f4:	0800046c 	.word	0x0800046c
  ldr r2, =_sbss
 80003f8:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80003fc:	2000001c 	.word	0x2000001c

08000400 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000400:	e7fe      	b.n	8000400 <ADC_IRQHandler>
	...

08000404 <__libc_init_array>:
 8000404:	b570      	push	{r4, r5, r6, lr}
 8000406:	4d0d      	ldr	r5, [pc, #52]	; (800043c <__libc_init_array+0x38>)
 8000408:	4c0d      	ldr	r4, [pc, #52]	; (8000440 <__libc_init_array+0x3c>)
 800040a:	1b64      	subs	r4, r4, r5
 800040c:	10a4      	asrs	r4, r4, #2
 800040e:	2600      	movs	r6, #0
 8000410:	42a6      	cmp	r6, r4
 8000412:	d109      	bne.n	8000428 <__libc_init_array+0x24>
 8000414:	4d0b      	ldr	r5, [pc, #44]	; (8000444 <__libc_init_array+0x40>)
 8000416:	4c0c      	ldr	r4, [pc, #48]	; (8000448 <__libc_init_array+0x44>)
 8000418:	f000 f818 	bl	800044c <_init>
 800041c:	1b64      	subs	r4, r4, r5
 800041e:	10a4      	asrs	r4, r4, #2
 8000420:	2600      	movs	r6, #0
 8000422:	42a6      	cmp	r6, r4
 8000424:	d105      	bne.n	8000432 <__libc_init_array+0x2e>
 8000426:	bd70      	pop	{r4, r5, r6, pc}
 8000428:	f855 3b04 	ldr.w	r3, [r5], #4
 800042c:	4798      	blx	r3
 800042e:	3601      	adds	r6, #1
 8000430:	e7ee      	b.n	8000410 <__libc_init_array+0xc>
 8000432:	f855 3b04 	ldr.w	r3, [r5], #4
 8000436:	4798      	blx	r3
 8000438:	3601      	adds	r6, #1
 800043a:	e7f2      	b.n	8000422 <__libc_init_array+0x1e>
 800043c:	08000464 	.word	0x08000464
 8000440:	08000464 	.word	0x08000464
 8000444:	08000464 	.word	0x08000464
 8000448:	08000468 	.word	0x08000468

0800044c <_init>:
 800044c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800044e:	bf00      	nop
 8000450:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000452:	bc08      	pop	{r3}
 8000454:	469e      	mov	lr, r3
 8000456:	4770      	bx	lr

08000458 <_fini>:
 8000458:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800045a:	bf00      	nop
 800045c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800045e:	bc08      	pop	{r3}
 8000460:	469e      	mov	lr, r3
 8000462:	4770      	bx	lr
